pipeline {
    agent { label 'jenkins_agent_net' }
    tools {
        dockerTool "docker"
        allure "allure"
        nodejs "nodejs"
    }
    environment {
        PATH="$PATH:/root/.dotnet/tools"
        SONAR_TOKEN = credentials('Sonarqube')
        NUGET_API_KEY = credentials('NuGet')
        AZURE_APP_NAME = 'netmovies'
        RESOURCE_GROUP = 'TFG'
    }
    stages {
        stage('Restore Dependencies') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        sh 'dotnet restore ./TiendaOnline'
                        sh 'dotnet restore ./TestTiendaOnline'
                    }
                }
            }
        }
        stage('Install Tools') {
            steps {
                sh 'dotnet tool install --global dotnet-reportgenerator-globaltool'
            }
        }
        stage('Build') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def buildOutput = sh(script: 'dotnet build ./TiendaOnline --configuration Release', returnStdout: true).trim()
                        def buildOutputTest = sh(script: 'dotnet build ./TestTiendaOnline --configuration Release', returnStdout: true).trim()

                        if (buildOutput.contains("warning") || buildOutputTest.contains("warning")) {  
                            echo "⚠ Se encontraron warnings en la compilación. Marcando UNSTABLE."
                            currentBuild.result = 'UNSTABLE'
                        } 

                    }
                }
            }
        }
        stage('Dockerize App and Create Selenoid Containers') {
            agent { label 'principal' }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        sh 'docker-compose -f docker-compose.yml down'
                        sh 'docker-compose -f docker-compose.yml up --build -d'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        sh 'dotnet test ./TestTiendaOnline --configuration Release --logger "trx;LogFileName=test_results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/coverage.cobertura.xml'
                    }
                }
            }
        }
        stage('Sonar') {
            steps {
                dir('TiendaOnline') {
                    timeout(time: 10, unit: 'MINUTES') {
                        withSonarQubeEnv('sonarqube') {
                            script {
                                def scannerHome = tool 'SonaScanner.NetCore'
                                sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:\"TFG_NET\" /d:sonar.cs.opencover.reportsPaths=../TestTiendaOnline/TestResults/coverage.opencover.xml"
                                sh 'dotnet build'
                                sh 'dotnet test --no-build /p:CollectCoverage=true /p:CoverletOutput=TestResults/coverage.opencover.xml /p:CoverletOutputFormat=opencover'
                                sh 'cat ../TestTiendaOnline/TestResults/coverage.opencover.xml'
                                sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                        }
                        }
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                sleep(10) // seconds
                timeout(time: 4, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Pack NuGet Package') {
            steps {
                script {
                    sh 'dotnet pack ./TiendaOnline -c Release -o ./nupkg'
                }
            }
        }
        stage('Publish to NuGet') {
            steps {
                script {
                    sh 'dotnet nuget push ./nupkg/*.nupkg -k ${NUGET_API_KEY} -s https://api.nuget.org/v3/index.json --skip-duplicate'
                }
            }
        }
         stage('Zip proyect') {
            steps {
                script {
                    sh 'dotnet publish ./TiendaOnline -c Release -o output/'
                    sh '''
                    cd output
                    ls
                    zip -r ../myapp.zip .
                    cd ..
                    ls -la myapp.zip
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                withEnv(['AZURE_SUBSCRIPTION_ID=7f2d989c-2cfa-45c8-944c-328deee9629a',
                                            'AZURE_TENANT_ID=05ea74a3-92c5-4c31-978a-925c3c799cd0']) {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'Azure', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
                            script {
                                sh '''
                                     az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
                                    az account set -s $AZURE_SUBSCRIPTION_ID
                                    az webapp deploy --resource-group TFG --name netmovies --src-path myapp.zip --type zip
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script{
                timeout(time: 5, unit: 'MINUTES'){
                            sh "cp ./TestTiendaOnline/TestResults/* allure-results"
                            allure([
                            results: [[path: "./TestTiendaOnline/TestResults"]],
                            reportBuildPolicy: 'ALWAYS'
                            ])
                        }
                node('principal'){
                    script {
                        sh 'docker-compose -f docker-compose.yml down'
                        cleanWs()
                    }
                }
            }
        }
    }
}